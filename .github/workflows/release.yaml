name: Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: true
        type: string
      skip-release-job:
        type: boolean
        default: false

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            archive: tar.gz tar.zst
            os: ubuntu-latest
            features: telemetry,self-update,managed-deno
          - target: x86_64-unknown-linux-musl
            archive: tar.gz tar.zst
            os: ubuntu-latest
            features: telemetry
          - target: x86_64-apple-darwin
            archive: tar.gz
            os: macos-latest
            features: telemetry,self-update,managed-deno
          - target: aarch64-apple-darwin
            archive: tar.gz
            os: macos-latest
            features: telemetry,self-update,managed-deno
          - target: x86_64-pc-windows-msvc
            archive: tar.gz
            os: windows-latest
            features: telemetry,self-update,managed-deno

    steps:
      - uses: actions/checkout@master
      - name: Set version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev musl-tools

      - uses: Swatinem/rust-cache@v2

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p cicada-cli --release --target ${{ matrix.target }} -F ${{ matrix.features }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY }}

      - name: Upload release (linux)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl'
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          version=${{ steps.version.outputs.version }}
          echo "version=$version"

          strip target/${{ matrix.target }}/release/cicada-cli
          mkdir out
          mv target/${{ matrix.target }}/release/cicada-cli out/cicada

          for archive in ${{ matrix.archive }}; do
            OUT_FILE=cicada-${{ matrix.target }}.$archive
            if [[ "$archive" == "tar.gz" ]]; then
              tar -czf $OUT_FILE -C out cicada
            fi 
            if [[ "$archive" == "tar.zst" ]]; then
              tar -cJf $OUT_FILE -C out cicada
            fi
            gh release upload $version $OUT_FILE
          done

      - name: Upload release (macos)
        if: matrix.target == 'x86_64-apple-darwin' || matrix.target == 'aarch64-apple-darwin'
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          version=${{ steps.version.outputs.version }}
          echo "version=$version"

          strip target/${{ matrix.target }}/release/cicada-cli
          mkdir out
          mv target/${{ matrix.target }}/release/cicada-cli out/cicada

          for archive in ${{ matrix.archive }}; do
            if [[ "$archive" == "zip" ]]; then
              OUT_FILE=cicada-${{ matrix.target }}.$archive
              zip $OUT_FILE out/cicada
            fi
            if [[ "$archive" == "tar.gz" ]]; then
              OUT_FILE=cicada-${{ matrix.target }}.$archive
              tar -czf $OUT_FILE -C out cicada
            fi
            gh release upload $version $OUT_FILE
          done

      - name: Upload release (windows)
        if: matrix.target == 'x86_64-pc-windows-msvc'
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        shell: bash
        run: |
          version=${{ steps.version.outputs.version }}
          echo "version=$version"

          mkdir out
          mv target/${{ matrix.target }}/release/cicada-cli.exe out/cicada.exe

          for archive in ${{ matrix.archive }}; do
            if [[ "$archive" == "zip" ]]; then
              OUT_FILE=cicada-${{ matrix.target }}.$archive
              7z a $OUT_FILE out/cicada
            fi
            if [[ "$archive" == "tar.gz" ]]; then
              OUT_FILE=cicada-${{ matrix.target }}.$archive
              tar -czf $OUT_FILE -C out cicada
            fi
            gh release upload $version $OUT_FILE
          done

  npm-release:
    name: Release to NPM
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@master
      - name: Set version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            version=${{ github.event.inputs.version }}
          else
            version=${{ github.ref_name }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "no_prefix_version=${version#v}" >> $GITHUB_OUTPUT
      - name: Publish to NPM
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          version=${{ steps.version.outputs.version }}
          echo "version=$version"

          cd packages/cicada
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          npm version $version
          npm publish

  docker-release:
    name: Release to Docker Hub
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@master
      - name: Set version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            version=${{ github.event.inputs.version }}
          else
            version=${{ github.ref_name }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "no_prefix_version=${version#v}" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/bin.Dockerfile
          push: true
          tags: cicadahq/cicada-bin:${{ steps.version.outputs.no_prefix_version }},cicadahq/cicada-bin:latest
